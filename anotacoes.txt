-Capítulo 1 -- Introdução

1.   Sem dúvida, é interessante manter o histórico do código dos projetos, para entendermos como chegamos até ali. Mas manter esse histórico junto ao código atual, com o decorrer do tempo, deixa nossos projetos confusos, poluídos com trechos e comentários que poderiam ser excluídos sem afetar o funcionamento do sistema.
     Seria bom se houvesse uma maneira de navegarmos pelo código do passado, como uma máquina do tempo para código...

2.   Construir um sistema em equipe é um grande desafio. Nosso código tem que se integrar de maneira transparente e sem emendas com o código de todos os outros membros da nossa equipe.
     Como podemos detectar que estamos alterando o mesmo código que um colega? Como mesclar as alterações que fizemos com as demais alterações da equipe? E como identificar conflitos entre essas alterações? Fazer isso manualmente, com cadernetas ou planilhas e muita conversa parece trabalhoso demais e bastante suscetível a erros e esquecimentos.
     Seria bom que tivéssemos em robô de integração de código, que fizesse todo esse trabalho automaticamente...

3.   Existem ferramentas que funcionam como máquinas do tempo e robôs de integração para o seu código. Elas nos permitem acompanhar as alterações desde as versões mais antigas. Também é possível detectar e mesclar alterações nos mesmos arquivos, além de identificar conflitos, tudo de maneira automática.
     Essas ferramentas são chamadas de sistemas de controle de versão(software com a finalidade de gerenciar diferentes versões no desenvolvimento de um documento qualquer). Esses sistemas são comumente utilizados no desenvolvimento de software para controlar as diferentes versões, histórico e desenvolvimento dos códigos-fontes e também da documentação.
     Nesse tipo de ferramenta, há um repositório(lugar onde se guarda, arquiva, coleciona alguma coisa) que nos permite obter qualquer versão já existente do código. Sempre que quisermos controlar as versões de algum arquivo, temos que informar que queremos rastreá-lo no repositório. A cada mudança que desejamos efetivar, devemos aramazenar as alterações nesse repositório.
     Alterações nos mesmos arquivos são mescladas de maneira automática sempre que possível. Já possíveis conflitos são identificados a cada vez que obtemos as mudanças dos nossos colegas de time.
     Alguns exemplos de sistemas de controle de versão mais antigos são CVS, ClearCase, SourceSafe e SVN(que ainda é bastante usado nas empresas).
     Em meados da década de 2000, surgiram sistemas de controle de versão mais modernos, mais rápidos e confiáveis, como Mercurial, Bazaar e, é claro, Git.

4.   O Git é um sistema de controle de versão que, pela sua estrutura interna, é uma máquina do tempo extremamente rápida e é um robô de integração bem competente.

5.   O GitHub, é uma aplicação Web que possibilita a hospedagem de repositórios Git, além de servir como uma rede social para programadores.

6.   A utilização do Git não é restrita apenas ao desenvolvimento de software, muitos administradores de rede, por exemplo, utilizam o Git para manter o histórico de evolução de arquivos de configuração em servidores.

---------------------------------------
-Capítulo 2 -- Tour prático

1.   É importante nos identificarmos para o Git, informando nosso nome e e-mail. Em um terminal, execute os comandos a seguir:
$ git config --global user.name "<nomeDoUsuario>"
$ git config --glboal user.email "<emailDoUsuario>"

2.   A pasta pessoal (ou home directory, em inglês) é o local dos arquivos de usuário como documentos, fotos, músicas etc.
     Se você não souber onde é pasta pessoal, digite o seguinte comando em um terminal:
$ echo ~

3.   Para transformar o diretório atual em um repositório do Git, basta executar o comando git init, que cria uma pasta oculta com o nome .git:
$ git init

4.   Podemos ver a situação dos arquivos no repositório Git com o comando git status:
$ git status

4.   Para que um arquivo seja rastreado pelo Git, devemos executar o comando git add:
$ git add <nomeDoArquivo>

5.   Após o git add o conteúdo do arquivo passa a ser rastreado pelo Git, mas ainda não foi gravado(ou commitado, em uma linguagem mais técnica) no repositório.

6.   Para gravarmos as mudanças no repositório, devemos executar o comando git commit com a opão -m para informar a mensagem do commit:
$ git commit -m "<mensagemDoCommit>"

7.   Para rastrearmos uma modificação, devemos executar o comando git add novamente:
$ git add <nomeDoArquivoModificado>

8.   Com a modificação rastreada, podemos gravá-la no repositório, com o comando git commit com a opção -m para informar a mensagem do commit:
$ git commit -m "<mensagemDoCommit>"

9.   Para verificar o histórico das alterações gravadas no repositório, podemos executar o comando git log:
$ git log

10.  Para criar um novo repositório no GitHub após criarmos uma conta, primeiramente acessamos a url https://github.com/new, o próximo passo é preencher no campo 'Repository name' com o nome do nosso repositório. Deixe o repositório como Public, para que qualquer pessoa consiga ver seu código. As demais opções podem ficar com os valores padrão. Para finalizar, devemos clicar em 'Create repository'. Pronto foi criado um repositório vazio lá no GitHub.

11.  Devemos apontar o repositório da nossa máquina para o repositório do GitHub. Podemos fazer isso com o comando git remote:
$ git remote add <apelidoParaRepositorioRemoto> <urlDoRepositorioRemoto>

12.  Com o comando anterior, apontamos o nome <apelidoParaRepositorioRemoto> para o repositório lá do GitHub.

13.  Com o repositório remoto configurado, podemos enviar nossas mudanças para o GitHub e, por consequência, para todo o mundo. Para isso, basta executar o comando git push:
$ git push <apelidoDadoAoRepositorioRemoto> <nomeDaBranchParaEnvio>

14.  É possível ver todas as alterações no projeto até agora, através do endereço: https://github.com/<nomeDoUsuario>/<nomeDoRepositorio>/commits/<nomeDaBranch>

15.  Com o projeto no GitHub, qualquer um pode acessar o código e ver o histórico, mesmo sem uma conta. Se a pessoa tiver cadastrada no GitHub, será possível baixar o código. Podemos clonar um repositório hospedado no GitHub em nossa máquina executando o comando git clone:
$ git clone <urlDoRepositorioRemoto>

16.  Git e GitHub não são a mesma coisa. O Git é o sistema de controle de versões, com o qual interagimos na linha de comando. Já o GitHub é uma rede social para programadores que disponibiliza repositórios Git acessíveis remotamente. O GitHub é muito utilizado para projetos open source que possuem vários colaboradores do mundo todo.
